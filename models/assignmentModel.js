const mongoose = require('mongoose');
const cryptoRandomString = require('crypto-random-string');
const validator = require('validator');

const assignmentSchema = new mongoose.Schema(
	{
		title: {
			type: String,
			required: [true, 'Please Enter Assignment Title'],
		},
		description: {
			type: String,
		},
		createdBy: {
			type: mongoose.Schema.ObjectId,
			ref: 'User',
			required: true,
		},
		courseId: {
			type: mongoose.Schema.ObjectId,
			ref: 'Course',
			required: true,
		},
		createdAt: {
			type: Date,
			required: true,
			default: Date.now(),
		},
		files: [String],
		dueDate: {
			type: String,
			validate: [validator.isAfter, 'Assignment Due Date Must be after Current time'],
		},
		totalPoints: {
			type: Number,
		},
		code: {
			type: String,
			unique: true,
		},
	},
	{
		toJSON: { virtuals: true },
		toObject: { virtuals: true },
	}
);
assignmentSchema.virtual('submissions', {
	ref: 'Submission',
	foreignField: 'assignmentId',
	localField: '_id',
});
assignmentSchema.pre(/^find/, function (next) {
	this.find().populate('submissions');
	next();
});
assignmentSchema.pre('save', async function (next) {
	// Add Unique Autogenerated ClassCode
	this.code = cryptoRandomString({ length: 6, type: 'distinguishable' });
	next();
});
assignmentSchema.pre(/^find/, function (next) {
	this.find().sort('dueDate');
	next();
});
const Assignment = mongoose.model('Assignment', assignmentSchema);

module.exports = Assignment;
